// frontend/js/config.js - Servi√ßo de configura√ß√£o para acessar vari√°veis de ambiente
console.log('‚öôÔ∏è config.js carregando...');

/**
 * Classe para gerenciar configura√ß√µes do frontend vindas do backend
 */
class ConfigService {
    constructor() {
        this.config = null;
        this.apiKeys = null;
        this.mapProviders = null;
        this.loading = false;
        this.initialized = false;
    }

    /**
     * Inicializa o servi√ßo carregando configura√ß√µes do backend
     */
    async initialize() {
        if (this.loading) {
            console.log('‚è≥ ConfigService j√° est√° carregando...');
            return;
        }

        if (this.initialized) {
            console.log('‚úÖ ConfigService j√° inicializado');
            return;
        }

        this.loading = true;

        try {
            console.log('üîÑ Carregando configura√ß√µes do backend...');
            
            // Carrega configura√ß√µes gerais
            this.config = await window.go.main.App.GetFrontendConfig();
            console.log('‚úÖ Configura√ß√µes gerais carregadas:', this.config);

            // Carrega chaves de API seguras
            this.apiKeys = await window.go.main.App.GetSecureAPIKeys();
            console.log('üîë Chaves de API carregadas:', Object.keys(this.apiKeys));

            // Carrega configura√ß√£o de provedores de mapa
            this.mapProviders = await window.go.main.App.GetMapProviderConfig();
            console.log('üó∫Ô∏è Provedores de mapa carregados:', Object.keys(this.mapProviders));

            this.initialized = true;
            console.log('üéâ ConfigService inicializado com sucesso!');

        } catch (error) {
            console.error('‚ùå Erro ao carregar configura√ß√µes:', error);
            // Define configura√ß√µes padr√£o como fallback
            this.setDefaultConfig();
        } finally {
            this.loading = false;
        }
    }

    /**
     * Define configura√ß√µes padr√£o caso o carregamento falhe
     */
    setDefaultConfig() {
        console.log('üîÑ Usando configura√ß√µes padr√£o...');
        
        this.config = {
            app_version: '1.0.0',
            environment: 'development',
            default_map_provider: 'osm',
            available_providers: ['osm', 'osmDark', 'satellite', 'terrain', 'cartodb_dark']
        };

        this.apiKeys = {};
        
        this.mapProviders = {
            openstreetmap: { enabled: true }
        };
    }

    /**
     * Retorna uma chave de API espec√≠fica
     */
    getAPIKey(provider) {
        if (!this.initialized) {
            console.warn('‚ö†Ô∏è ConfigService n√£o inicializado ainda');
            return null;
        }

        const key = this.apiKeys[provider];
        if (!key) {
            console.log(`‚ÑπÔ∏è Chave de API n√£o encontrada para: ${provider}`);
            return null;
        }

        return key;
    }

    /**
     * Retorna configura√ß√£o de um provedor de mapa
     */
    getMapProviderConfig(provider) {
        if (!this.initialized) {
            console.warn('‚ö†Ô∏è ConfigService n√£o inicializado ainda');
            return null;
        }

        return this.mapProviders[provider] || null;
    }

    /**
     * Verifica se um provedor est√° dispon√≠vel
     */
    isProviderAvailable(provider) {
        const config = this.getMapProviderConfig(provider);
        return config && config.enabled === true;
    }

    /**
     * Retorna lista de provedores dispon√≠veis
     */
    getAvailableProviders() {
        if (!this.initialized) {
            return ['osm']; // Fallback b√°sico
        }

        return this.config.available_providers || ['osm'];
    }

    /**
     * Retorna configura√ß√£o completa
     */
    getConfig() {
        return this.config;
    }

    /**
     * Retorna vers√£o da aplica√ß√£o
     */
    getAppVersion() {
        return this.config?.app_version || '1.0.0';
    }

    /**
     * Retorna ambiente (development, production)
     */
    getEnvironment() {
        return this.config?.environment || 'development';
    }

    /**
     * Constr√≥i URL do Thunderforest com API key
     */
    getThunderforestURL(style, z, x, y) {
        const apiKey = this.getAPIKey('thunderforest');
        if (!apiKey) {
            console.warn('‚ö†Ô∏è Chave Thunderforest n√£o dispon√≠vel');
            return null;
        }

        return `https://tile.thunderforest.com/${style}/${z}/${x}/${y}.png?apikey=${apiKey}`;
    }

    /**
     * Constr√≥i URL do Mapbox com token p√∫blico
     */
    getMapboxURL(styleId, z, x, y) {
        const publicToken = this.getAPIKey('mapbox_public');
        if (!publicToken) {
            console.warn('‚ö†Ô∏è Token p√∫blico Mapbox n√£o dispon√≠vel');
            return null;
        }

        return `https://api.mapbox.com/styles/v1/mapbox/${styleId}/tiles/${z}/${x}/${y}?access_token=${publicToken}`;
    }

    /**
     * Retorna provedores de mapa atualizados com chaves de API
     */
    getUpdatedMapProviders() {
        const providers = { ...MAP_PROVIDERS }; // Copia provedores base

        // Atualiza Thunderforest se dispon√≠vel
        if (this.isProviderAvailable('thunderforest')) {
            const thunderforestKey = this.getAPIKey('thunderforest');
            
            providers.thunderforest_cycle = {
                name: 'Thunderforest Cycle',
                url: `https://tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=${thunderforestKey}`,
                attribution: '¬© Thunderforest ¬© OpenStreetMap contributors',
                darkFilter: false
            };

            providers.thunderforest_outdoors = {
                name: 'Thunderforest Outdoors',
                url: `https://tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=${thunderforestKey}`,
                attribution: '¬© Thunderforest ¬© OpenStreetMap contributors',
                darkFilter: false
            };
        }

        // Atualiza Mapbox se dispon√≠vel
        if (this.isProviderAvailable('mapbox')) {
            const mapboxToken = this.getAPIKey('mapbox_public');
            
            // Substitui URLs placeholder por URLs reais
            Object.keys(providers).forEach(key => {
                if (providers[key].provider === 'mapbox') {
                    providers[key].url = providers[key].url.replace('{accessToken}', mapboxToken);
                }
            });
        }

        return providers;
    }

    /**
     * Debug - Mostra todas as configura√ß√µes
     */
    debugConfig() {
        console.group('üêõ ConfigService Debug');
        console.log('Inicializado:', this.initialized);
        console.log('Config:', this.config);
        console.log('API Keys:', this.apiKeys);
        console.log('Map Providers:', this.mapProviders);
        console.groupEnd();
    }
}

// Inst√¢ncia global do servi√ßo de configura√ß√£o
window.configService = new ConfigService();

/**
 * Fun√ß√£o de conveni√™ncia para obter chaves de API
 */
window.getAPIKey = function(provider) {
    return window.configService.getAPIKey(provider);
};

/**
 * Fun√ß√£o para inicializar configura√ß√µes - deve ser chamada na inicializa√ß√£o da app
 */
window.initializeConfig = async function() {
    await window.configService.initialize();
    
    // Atualiza provedores de mapa com as novas chaves
    if (typeof MAP_PROVIDERS !== 'undefined') {
        const updatedProviders = window.configService.getUpdatedMapProviders();
        Object.assign(MAP_PROVIDERS, updatedProviders);
        console.log('üó∫Ô∏è Provedores de mapa atualizados com chaves de API');
    }
};

console.log('‚úÖ ConfigService carregado e pronto para uso');